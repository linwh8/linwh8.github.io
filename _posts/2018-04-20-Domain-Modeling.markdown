---
layout: post
title: Domain-Modeling
date: 2018-04-20 00:00:00 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: workflow.jpg # Add image post (optional)
tags: [Model] # add tag
---

> 
>
> **“The secret of change is to focus all of your energy not on fighting the old, but on building the new.”**
>
> – Socrates, Greek Philosopher
>
> 

#### **a.阅读 Asg_RH 文档，按用例构建领域模型。**

- 按 Task2 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸。
- 说明：请不要受 PCMEF 层次结构影响。你需要识别实体（E）和 中介实体（M，也称状态实体） 
  - 在单页面应用（如 vue）中，E 一般与数据库构建有关， M 一般与 store 模式 有关 
  - 在 java web 应用中，E 一般与数据库构建有关， M 一般与 session 有关 

![lesson7_class]({{site.baseurl}}/assets/img/lesson7_class.png)



#### **b. 数据库建模(E-R 模型)**

给出系统的 E-R 模型（数据逻辑模型）:(使用的建模工具：MySQL Workbench) 

![lessson7database]({{site.baseurl}}/assets/img/lessson7database.PNG)

导出的脚本如下：

```mysql
-- MySQL Script generated by MySQL Workbench
-- Sun Apr 29 20:56:58 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Hotel List`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Hotel List` (
  `id` INT NOT NULL,
  PRIMARY KEY (`id`));


-- -----------------------------------------------------
-- Table `mydb`.`Hotel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Hotel` (
  `id` INT NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `location` VARCHAR(45) NOT NULL,
  `phone number` VARCHAR(45) NOT NULL,
  `Hotel List_id` INT NOT NULL,
  PRIMARY KEY (`id`, `Hotel List_id`),
  INDEX `fk_Hotel_Hotel List_idx` (`Hotel List_id` ASC),
  CONSTRAINT `fk_Hotel_Hotel List`
    FOREIGN KEY (`Hotel List_id`)
    REFERENCES `mydb`.`Hotel List` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`Basket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Basket` (
  `category_id` INT NOT NULL,
  `object` VARCHAR(255) NOT NULL,
  `price` VARCHAR(45) NOT NULL,
  `num` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`category_id`));


-- -----------------------------------------------------
-- Table `mydb`.`Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Customer` (
  `category_id` INT NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `sex` VARCHAR(45) NOT NULL,
  `age` VARCHAR(45) NULL,
  `phone number` VARCHAR(45) NULL,
  `country` VARCHAR(45) NULL,
  PRIMARY KEY (`category_id`));


-- -----------------------------------------------------
-- Table `mydb`.`Reservation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Reservation` (
  `category_id` INT NOT NULL,
  `check in date` VARCHAR(255) NOT NULL,
  `check out date` VARCHAR(45) NULL,
  `price` VARCHAR(45) NULL,
  `room num` VARCHAR(45) NULL,
  `room type` VARCHAR(45) NULL,
  `date` VARCHAR(45) NULL,
  PRIMARY KEY (`category_id`));


-- -----------------------------------------------------
-- Table `mydb`.`Room`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Room` (
  `category_id` INT NOT NULL,
  `type` VARCHAR(255) NOT NULL,
  `price` VARCHAR(45) NOT NULL,
  `Hotel_id` INT NOT NULL,
  `Hotel_Hotel List_id` INT NOT NULL,
  `Basket_category_id` INT NOT NULL,
  `Customer_category_id` INT NOT NULL,
  `Reservation_category_id` INT NOT NULL,
  PRIMARY KEY (`category_id`, `Hotel_id`, `Hotel_Hotel List_id`, `Basket_category_id`, `Customer_category_id`, `Reservation_category_id`),
  INDEX `fk_Room_Hotel1_idx` (`Hotel_id` ASC, `Hotel_Hotel List_id` ASC),
  INDEX `fk_Room_Basket1_idx` (`Basket_category_id` ASC),
  INDEX `fk_Room_Customer1_idx` (`Customer_category_id` ASC),
  INDEX `fk_Room_Reservation1_idx` (`Reservation_category_id` ASC),
  CONSTRAINT `fk_Room_Hotel1`
    FOREIGN KEY (`Hotel_id` , `Hotel_Hotel List_id`)
    REFERENCES `mydb`.`Hotel` (`id` , `Hotel List_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Room_Basket1`
    FOREIGN KEY (`Basket_category_id`)
    REFERENCES `mydb`.`Basket` (`category_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Room_Customer1`
    FOREIGN KEY (`Customer_category_id`)
    REFERENCES `mydb`.`Customer` (`category_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Room_Reservation1`
    FOREIGN KEY (`Reservation_category_id`)
    REFERENCES `mydb`.`Reservation` (`category_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
```



**简单叙说数据库逻辑模型与领域模型的异同:** 

相同点：将概念类图形化，都包含概念类的名字、属性及其关系。

不同点：领域模型是面向需求的，和数据库模型是面向实际代码开发。数据库模型较为细节，如数据段的类型，外键约束等等